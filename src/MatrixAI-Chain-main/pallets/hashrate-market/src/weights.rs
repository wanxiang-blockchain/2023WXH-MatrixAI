
//! Autogenerated weights for pallet_hashrate_market
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/matrix-ai
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_hashrate_market
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/hashrate-market/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_hashrate_market.
pub trait WeightInfo {
	fn add_machine() -> Weight;
	fn remove_machine() -> Weight;
	fn make_offer() -> Weight;
	fn cancel_offer() -> Weight;
	fn place_order() -> Weight;
	fn renew_order() -> Weight;
	fn order_completed() -> Weight;
	fn order_failed() -> Weight;
}

/// Weights for pallet_hashrate_market using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn add_machine() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5632`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(45_000_000, 5632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn remove_machine() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn make_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 5632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn cancel_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_000_000, 5632)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn place_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5664`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(90_000_000, 5664)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:0)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn renew_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(82_000_000, 5664)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn order_completed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 87_000_000 picoseconds.
		Weight::from_parts(94_000_000, 5664)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn order_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(91_000_000, 5664)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn add_machine() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `5632`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(45_000_000, 5632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn remove_machine() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn make_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 5632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn cancel_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5632`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_000_000, 5632)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn place_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253`
		//  Estimated: `5664`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(90_000_000, 5664)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:0)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn renew_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 81_000_000 picoseconds.
		Weight::from_parts(82_000_000, 5664)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn order_completed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 87_000_000 picoseconds.
		Weight::from_parts(94_000_000, 5664)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: HashrateMarket Order (r:1 w:1)
	/// Proof: HashrateMarket Order (max_values: None, max_size: Some(2199), added: 4674, mode: MaxEncodedLen)
	/// Storage: HashrateMarket Machine (r:1 w:1)
	/// Proof: HashrateMarket Machine (max_values: None, max_size: Some(2167), added: 4642, mode: MaxEncodedLen)
	fn order_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `5664`
		// Minimum execution time: 88_000_000 picoseconds.
		Weight::from_parts(91_000_000, 5664)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}